library(DALEX)
library(gbm)
library(iBreakDown)
library(randomForest)
library(ggplot2)
library(ingredients)
object_load <- function(file) {
env <- new.env()
load(file = file, envir = env)
env[[ls(env)[1]]]
}
get_observation <- function({{{params_x}}}) {
{{{params_ok}}}
(my_exp <- object_load("{{{explain_name}}}"))
new_observation <- my_exp$data[1,]
subtitle = ""
{{{par_check}}}
list(new_observation = new_observation, subtitle = subtitle)
}
  
#* @apiTitle {{{title}}}

#* Using a {{{model_name}}} model

{{{parameter_annotations}}}
#* @get /predict
#* @post /predict
function(req, {{{params_x}}}) {
tmp <- get_observation({{{params}}})
new_observation <- tmp$new_observation
(my_exp <- object_load("{{{explain_name}}}"))
pr <- predict(my_exp, new_observation)
list(
result_text = paste("Predicted value", pr),
result = pr,
raw_body = req$postBody)
}

#* Plot break down 

{{{parameter_annotations}}}
#* @get /break_down
#* @post /break_down
#* @png (width = 420, height = 250)
function(req, {{{params_x}}}) {

  tmp <- get_observation({{{params}}})
  new_observation <- tmp$new_observation
  (my_exp <- object_load("{{{explain_name}}}"))
  pr <- predict(my_exp, new_observation)
  sp_rf <- iBreakDown::break_down(my_exp, new_observation)
  print(plot(sp_rf))
}


#* Plot ceteris paribus

#* @param variable variable to be explained
{{{parameter_annotations}}}
#* @get /ceteris_paribus
#* @post /ceteris_paribus
#* @png (width = 420, height = 250)
function(req, variable, {{{params_x}}}) {

  tmp <- get_observation({{{params}}})
  new_observation <- tmp$new_observation
  (my_exp <- object_load("{{{explain_name}}}"))

  if (!(variable %in% c({{{params_amp}}}))) {
    variable = {{{first_param}}}
  }
  
  pr <- predict(my_exp, new_observation)
  title = paste0("Prediction for ", variable, " = ", new_observation[[variable]], " is ", round(pr, 3))
  subtitle = paste0("Prediction for different values of ", variable, ":")
  grids = list()
  grids[[variable]] = sort(unique(my_exp$data[,variable]))
  cp_my_exp <- ceteris_paribus(my_exp, new_observation,
                                   variables = variable, variable_splits = grids)

  if (variable %in% c({{{params_numeric}}})) {
    pl <- plot(cp_my_exp) +
            show_observations(cp_my_exp, variables = variable, size = 5) +
            ylab(paste0("Prediction after change in ", variable)) + facet_null() +
            xlab(variable) +
            ggtitle(title, subtitle) + 
            theme(plot.title = element_text(size = 12), plot.subtitle = element_text(size = 12))
  }
  if (variable %in% c({{{params_factor}}})){
    pl <- plot(cp_my_exp, only_numerical = FALSE) +
            ylab(paste0("Prediction after change in ", variable)) + facet_null() +
            xlab(variable) +
            ggtitle(title, subtitle) + 
            theme(plot.title = element_text(size = 12), plot.subtitle = element_text(size = 12))
  }
  print(pl)
}

#* Break down description 

{{{parameter_annotations}}}
#* @get /break_down_desc
#* @post /break_down_desc
function(req, {{{params_x}}}) {
  tmp <- get_observation({{{params}}})
  new_observation <- tmp$new_observation
  (my_exp <- object_load("{{{explain_name}}}"))
  pr <- predict(my_exp, new_observation)
  sp_rf <- iBreakDown::break_down(my_exp, new_observation)
  var_cont <- sp_rf$contribution
  var_name <- lapply(sp_rf$variable_name, as.character)
  
  bd_desc <- rbind(var_cont, var_name)
  bd_desc <- t(bd_desc)
  bd_desc <- bd_desc[order(unlist(bd_desc[,1])),]
  
  description <- paste(my_exp$label, " predicts the result of ", round(predict(my_exp, new_observation),3), " which is ", sep="")
  if(sp_rf$contribution[1]>predict(my_exp, new_observation)) description <- paste(description, "lower ", sep="")
  if(sp_rf$contribution[1]<=predict(my_exp, new_observation)) description <- paste(description, "higher ", sep="")
  description <- paste(description, "than the average model prediction. The most important variable that ", sep="")
  if(bd_desc[1,1]<0) description <- paste(description, "decreases ", sep="")
  if(bd_desc[1,1]>=0) description <- paste(description, "increases ", sep="")
  description <- paste(description, "the prediction is ", bd_desc[1,2], ".", sep= "")
}


#* Ceteris paribus description

#* @param variable variable to be explained
{{{parameter_annotations}}}
#* @get /ceteris_paribus_desc
#* @post /ceteris_paribus_desc
function(req, variable, {{{params_x}}}) {

  tmp <- get_observation({{{params}}})
  new_observation <- tmp$new_observation
  (my_exp <- object_load("{{{explain_name}}}"))

  if (!(variable %in% c({{{params_amp}}}))) {
    variable = {{{first_param}}}
  }
  
  pr <- predict(my_exp, new_observation)
  grids = list()
  grids[[variable]] = sort(unique(my_exp$data[,variable]))
  cp_my_exp <- ceteris_paribus(my_exp, new_observation,
                                   variables = variable, variable_splits = grids)
  var_val <- cp_my_exp[,variable]
  pred_val <- cp_my_exp$`_yhat_`
  cp_desc <- cbind(var_val, pred_val)
  cp_desc <- cp_desc[order(cp_desc[,1]),]
  description <- paste(my_exp$label, " predicts the result for the selected instance of ", round(predict(my_exp, new_observation),3), ". The highest prediction occurs for the ", sep="")
  description <- paste(description, variable, " ", cp_desc[1,1], " and the lowest for the ",variable," ", cp_desc[nrow(cp_desc),1], ".", sep="")
}